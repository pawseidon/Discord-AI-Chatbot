#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Migration script for moving utilities from bot_utilities to the new architecture.
This script helps automate the process of moving files to their new locations.
"""

import os
import sys
import shutil
import argparse
import logging
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger("migrate_utils")

# Migration mapping: old_path -> new_path
MIGRATION_MAP = {
    # Already migrated
    "bot_utilities/sequential_thinking.py": "features/reasoning/methods/sequential_thinking.py",
    "bot_utilities/react_utils.py": "features/reasoning/methods/react_reasoning.py",
    "bot_utilities/reflective_rag.py": "features/reasoning/methods/reflective_rag.py",
    "bot_utilities/speculative_rag.py": "features/reasoning/methods/speculative_rag.py",
    "bot_utilities/reasoning_router.py": "features/reasoning/reasoning_router.py",
    "bot_utilities/discord_integration.py": "core/discord_integration.py",
    
    # Pending migration
    "bot_utilities/chain_of_verification.py": "features/reasoning/methods/chain_of_verification.py",
    "bot_utilities/agent_utils.py": "features/agents/agent_utils.py",
    "bot_utilities/hallucination_handler.py": "features/safety/hallucination_handler.py",
    "bot_utilities/context_manager.py": "features/context/context_manager.py",
    "bot_utilities/ai_provider.py": "core/ai_provider.py",
    "bot_utilities/ai_utils.py": "core/ai_utils.py",
    "bot_utilities/token_utils.py": "utils/token_utils.py",
    "bot_utilities/memory_utils.py": "features/memory/memory_utils.py",
    "bot_utilities/state_manager.py": "features/state/state_manager.py",
    "bot_utilities/multimodal_utils.py": "features/multimodal/multimodal_utils.py",
    "bot_utilities/formatting_utils.py": "utils/formatting_utils.py",
    "bot_utilities/monitoring.py": "utils/monitoring.py",
    "bot_utilities/sentiment_utils.py": "features/analysis/sentiment_utils.py",
    "bot_utilities/fallback_utils.py": "features/safety/fallback_utils.py",
    "bot_utilities/news_utils.py": "features/content/news_utils.py",
    "bot_utilities/rag_utils.py": "features/reasoning/methods/basic_rag.py",
    "bot_utilities/config_loader.py": "core/config_loader.py",
    "bot_utilities/mcp_utils.py": "utils/mcp_utils.py",
    "bot_utilities/response_utils.py": "utils/response_utils.py",
}

def create_directory_structure() -> None:
    """Create the directory structure needed for migration"""
    # Extract all target directories from migration map
    for target_path in MIGRATION_MAP.values():
        directory = os.path.dirname(target_path)
        os.makedirs(directory, exist_ok=True)
        
        # Create __init__.py if it doesn't exist
        init_path = os.path.join(directory, "__init__.py")
        if not os.path.exists(init_path):
            with open(init_path, 'w') as f:
                f.write('# Auto-generated by migration script\n')
                f.write(f'"""\n{os.path.basename(directory)} module for Discord AI Chatbot\n"""\n')
    
    logger.info("Created directory structure")

def migrate_file(source_path: str, target_path: str, dry_run: bool = False) -> None:
    """Migrate a single file from source to target path"""
    if dry_run:
        logger.info(f"Would migrate {source_path} -> {target_path}")
        return
    
    if not os.path.exists(source_path):
        logger.warning(f"Source file not found: {source_path}")
        return
    
    # Create target directory if it doesn't exist
    target_dir = os.path.dirname(target_path)
    os.makedirs(target_dir, exist_ok=True)
    
    # Copy the file
    shutil.copy2(source_path, target_path)
    logger.info(f"Migrated {source_path} -> {target_path}")
    
    # Create backup of source file
    backup_path = f"{source_path}.bak"
    shutil.copy2(source_path, backup_path)
    logger.info(f"Created backup: {backup_path}")

def migrate_all(dry_run: bool = False) -> None:
    """Migrate all files according to the migration map"""
    create_directory_structure()
    
    for source_path, target_path in MIGRATION_MAP.items():
        migrate_file(source_path, target_path, dry_run)
    
    logger.info("Migration complete")

def list_migrations() -> None:
    """List all pending migrations"""
    pending = []
    completed = []
    
    for source_path, target_path in MIGRATION_MAP.items():
        if os.path.exists(target_path):
            status = "✓"
            completed.append((source_path, target_path))
        else:
            status = " "
            pending.append((source_path, target_path))
    
    print("\nMigration Status:")
    print("================")
    print(f"Completed: {len(completed)}")
    print(f"Pending: {len(pending)}")
    print("\nPending Migrations:")
    print("==================")
    
    for source_path, target_path in pending:
        print(f"[ ] {source_path} -> {target_path}")
    
    print("\nCompleted Migrations:")
    print("====================")
    
    for source_path, target_path in completed:
        print(f"[✓] {source_path} -> {target_path}")

def main() -> None:
    """Main entry point"""
    parser = argparse.ArgumentParser(description="Utility migration script")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # List command
    list_parser = subparsers.add_parser("list", help="List migrations")
    
    # Migrate command
    migrate_parser = subparsers.add_parser("migrate", help="Migrate files")
    migrate_parser.add_argument("--file", help="Specific file to migrate (from bot_utilities)")
    migrate_parser.add_argument("--dry-run", action="store_true", help="Show what would be migrated without making changes")
    
    # Parse arguments
    args = parser.parse_args()
    
    if args.command == "list":
        list_migrations()
    elif args.command == "migrate":
        if args.file:
            source_path = f"bot_utilities/{args.file}"
            if source_path in MIGRATION_MAP:
                target_path = MIGRATION_MAP[source_path]
                migrate_file(source_path, target_path, args.dry_run)
            else:
                logger.error(f"No migration path defined for {source_path}")
                available_files = [os.path.basename(p) for p in MIGRATION_MAP.keys()]
                logger.info(f"Available files: {', '.join(available_files)}")
        else:
            migrate_all(args.dry_run)
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 